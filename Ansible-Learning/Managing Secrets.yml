Managing Secrets:

  Ansible may need access to sensitive data such as passwords or API keys in order to configure
managed hosts. Normally, this information might be stored as plain text in inventory variables
or other Ansible files. In that case, however, any user with access to the Ansible files or a version
control system which stores the Ansible files would have access to this sensitive data. This poses
an obvious security risk

commands:
  $ ansible-vault create secret.yml
    New Vault password: pass
    Confirm New Vault password: pass
  Instead of entering the vault password through standard input, you can use a vault password file
to store the vault password. You need to carefully protect this file using file permissions and other
means.
  $ ansible-vault create --vault-password-file=vault-pass secret.yml

  $ ansible-vault edit secret.yml
  $ ansible-vault encrypt secret1.yml secret2.yml
  $ ansible-vault decrypt secret1.yml --output=secret1-decrypted.yml
  $ ansible-vault rekey secret.yml -change password

  $ ansible-playbook --vault-id @prompt site.yml - when running a playbook to enter the password of the vault
  $ ansible-playbook --vault-password-file=vault-pw-file site.yml - or file containg the password
  You can also use the ANSIBLE_VAULT_PASSWORD_FILE environment variable to specify the
  default location of the password file.

Recommanded practices for variables managment:
    .
    ├── ansible.cfg
    ├── group_vars
    │   └── webservers
    │       └── vars
    ├── host_vars
    │   └── demo.example.com
    │       ├── vars
    │       └── vault
    ├── inventory
    └── playbook.yml

Example of playbook using vaults:

---
- name: create user accounts for all our servers
  hosts: devservers
  become: True
  remote_user: devops
  vars_files:
    - secret.yml
  tasks:
    - name: Creating user from secret.yml
      user:
        name: "{{ username }}"
        password: "{{ pwhash }}"
