Handling Task Failure:

    Managing Task Errors in Plays:
          Ansible evaluates the return code of each task to determine whether the task succeeded or failed.
        Normally, when a task fails Ansible immediately aborts the rest of the play on that host, skipping all
        subsequent tasks.
          However, sometimes you might want to have play execution continue even if a task fails. For
        example, you might expect that a particular task could fail, and you might want to recover by
        running some other task conditionally. There are a number of Ansible features that can be used to
        manage task errors.
    
    Ignoring Task Failure:

        - name: Latest version of notapkg is installed
          yum:
            name: notapkg
            state: latest
          ignore_errors: yes
    
    Forcing Execution of Handlers after Task Failure:

        ---
        - hosts: all
          force_handlers: yes # this will force the handlers to be executed
          tasks:
            - name: a task which always notifies its handler
              command: /bin/true
              notify: restart the database # this will run the restart the database handler
            - name: a task which fails because the package doesn't exist
              yum:
                name: notapkg
                state: latest
          handlers:
            - name: restart the database
              service:
              name: mariadb
              state: restarted
    
    Specifying Task Failure Conditions:

        tasks:
          - name: Run user creation script
            shell: /usr/local/bin/create_users.sh
            register: command_result
            ignore_errors: yes
          - name: Report script failure
            fail:
              msg: "The password is missing in the output"
            when: "'Password missing' in command_result.stdout
    
    Specifying When a Task Reports "Changed" Results:

          When a task makes a change to a managed host, it reports the changed state and notifies
          handlers. When a task does not need to make a change, it reports ok and does not notify handlers

        tasks:
          - shell:
              cmd: /usr/local/bin/upgrade-database
            register: command_result
            changed_when: "'Success' in command_result.stdout"
            notify: 
              - restart_database
        handlers:
          - name: restart_database
              service:
              name: mariadb
              state: restarted
    
    Ansible Blocks and Error Handling:

        Blocks also allow for error handling in combination with the rescue and always statements. If
        any task in a block fails, tasks in its rescue block are executed in order to recover. After the tasks
        in the block clause run, as well as the tasks in the rescue clause if there was a failure, then tasks in
        the always clause run. To summarize:
              • block: Defines the main tasks to run.
              • rescue: Defines the tasks to run if the tasks defined in the block clause fail.
              • always: Defines the tasks that will always run independently of the success or failure of tasks
              defined in the block and rescue clauses.

        tasks:
          - name: Upgrade DB
            block:
              - name: upgrade the database
                shell:
                cmd: /usr/local/lib/upgrade-database
            rescue:
              - name: revert the database upgrade
                shell:
                cmd: /usr/local/lib/revert-database
            always:
              - name: always restart the database
                service:
                  name: mariadb
                  state: restarted




